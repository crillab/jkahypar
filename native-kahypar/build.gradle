/*
 * This is the build.gradle configuration file for the native implementation
 * of KaHyPar.
 */

/**********************************
 * System Dependent Configuration *
 **********************************/

// Declaring the location of the shared library.
def distDir = "${rootDir}/dist"
def jkahyparDir = "${rootDir}/java-wrapper/src/main/resources"
def platform = null
def arch = System.properties["os.arch"].replaceAll("_", "-")
def sharedLibrary = null

// Setting the output according to the current OS.
if (System.properties["os.name"].equals("Linux")) {
    // Building a Linux shared library.
    platform = "linux-${arch}"
    sharedLibrary = "libkahypar.so"

} else if (System.properties["os.name"].equals("Mac OS X")) {
    // Building a macOS shared library.
    platform = "darwin-${arch}"
    sharedLibrary = "libkahypar.dylib"

} else {
    // Building on the current OS is not supported.
    throw new GradleException("Unsupported OS: " + System.properties["os.name"])
}

/***************
 * Build Tasks *
 ***************/

// Executes 'cmake' for KaHyPar.
task cmake(type: Exec) {
    inputs.dir "kahypar"
    outputs.dir "build"

    doFirst {
        mkdir "build"
    }

    workingDir "build"
    commandLine "cmake", "../kahypar", "-DCMAKE_BUILD_TYPE=RELEASE"
}

// Executes 'make' for building the KaHyPar shared library.
task makeSharedLibrary(type: Exec) {
    dependsOn "cmake"

    workingDir "build"
    commandLine "make", "-f", "lib/CMakeFiles/kahypar.dir/build.make", "lib/${sharedLibrary}"
}

// Builds KaHyPar and puts its shared library into the distribution folder.
task dist(type: Copy) {
    dependsOn "makeSharedLibrary"

    doFirst {
        mkdir "${distDir}/${platform}"
    }

    from "build/lib/"
    into "${distDir}/${platform}"
    include "${sharedLibrary}"
}

// Builds KaHyPar shared library as a resource of JKaHyPar.
task buildForJkahypar(type: Copy) {
    dependsOn "makeSharedLibrary"

    doFirst {
        mkdir "${jkahyparDir}/${platform}"
    }

    from "build/lib/"
    into "${jkahyparDir}/${platform}"
    include "${sharedLibrary}"
}

/******************
 * Cleaning Tasks *
 ******************/

// Removes all binary files generated by 'make'.
task makeClean(type: Exec) {
    workingDir "build"
    commandLine "make", "clean"
}

// Removes all build files, generated by either 'cmake' or 'make'.
task clean(type: Delete) {
    delete "build"
}
